{"version":3,"sources":["App.js","registerServiceWorker.js","index.js","assets/bmi.png","index.css"],"names":["App","state","isOpen","lang","statusUpdateHandler","val","_this","props","startListening","stopListening","langUpdateHandler","resetTranscript","setState","toggleCollapse","_this2","this","recognition","browserSupportsSpeechRecognition","react_default","a","createElement","BrowserRouter","basename","className","mdbreact","color","dark","expand","onClick","id","navbar","right","indexStyle","Navit","active","to","style","width","src","img","alt","value","transcript","rows","placeholder","Component","SpeechRecognition","autoStart","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.27fbc702.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Navbar, NavbarBrand, NavbarToggler, Collapse, MDBContainer, MDBRow, MDBCol, NavLink, NavItem, NavbarNav } from \"mdbreact\";\nimport SpeechRecognition from 'react-speech-recognition';\nimport PropTypes from 'prop-types';\nimport indexStyle from './index.css';\nimport img from './assets/bmi.png';\n\nconst propTypes = {\n  // Props injected by SpeechRecognition\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  recognition: PropTypes.object,\n  startListening: PropTypes.func,\n  stopListening: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool\n}\nconst options = {\n  autoStart: false\n}\nclass App extends Component {\n  state = {\n    isOpen: false,\n    lang: 'en-US',\n  };\n  statusUpdateHandler = (val) => {\n    if(val === 'start') this.props.startListening();\n    else if (val === 'pause') this.props.stopListening();\n  }\n  langUpdateHandler = (val) => {\n    this.props.resetTranscript();\n    this.setState({lang: val})\n  }\n  toggleCollapse = () => { \n      this.setState({ isOpen: !this.state.isOpen });\n  }\n  \n  render() {\n    if(this.props.recognition){\n    this.props.recognition.lang = this.state.lang;\n    }\n    if (!this.props.browserSupportsSpeechRecognition) {\n      return null\n    }\n    return (\n      <BrowserRouter basename=\"/bmieasywrite\">\n      <div className=\"App\">\n      <Navbar color=\"indigo\" dark expand=\"md\">\n          <NavbarBrand>\n            <strong className=\"white-text\">BookmanIndia</strong>\n          </NavbarBrand>\n          <NavbarToggler\n            onClick={this.toggleCollapse}\n          />\n          <Collapse\n            id=\"navbarCollapse3\"\n            isOpen={this.state.isOpen}\n            navbar\n          >\n            <NavbarNav right>\n              <NavItem className= {indexStyle.Navit} active>\n              <NavLink to=\"\" onClick={() => this.statusUpdateHandler('start')}>Start</NavLink>\n              </NavItem>\n              <NavItem className= {indexStyle.Navit} active>\n              <NavLink to=\"\" onClick={() => this.statusUpdateHandler('pause')}>Pause</NavLink>\n              </NavItem>\n              <NavItem className= {indexStyle.Navit} active>\n              <NavLink to=\"\" onClick={() => this.langUpdateHandler('hi-IN')}>Hindi</NavLink>\n              </NavItem>\n              <NavItem className= {indexStyle.Navit} active>\n              <NavLink to=\"\" onClick={() => this.langUpdateHandler('en-US')}>English</NavLink>\n              </NavItem>\n              <NavItem className= {indexStyle.Navit} active>\n              <NavLink to=\"\" onClick={this.props.resetTranscript}>Reset</NavLink>\n              </NavItem>\n            </NavbarNav>\n          </Collapse>\n      </Navbar>\n        <MDBContainer>\n        <div className=\"text-center my-4\"><img style={{width:\"100px\"}} src={img} alt=\"Logo\"/><br /><h2 className=\"my-2\">Bookman India Write Easy</h2></div>\n        <MDBRow>\n          <MDBCol>\n          <textarea className=\"form-control\" value={this.props.transcript} rows='12' placeholder=\"Press the start button and speak to show here...\"/>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n      </div>\n      </BrowserRouter>);\n  }\n}\nApp.propTypes = propTypes\nexport default SpeechRecognition(options)(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();","module.exports = __webpack_public_path__ + \"static/media/bmi.7f9360d8.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navit\":\"_2dZ2SFXDQvcwkY_nqESjzg\"};"],"sourceRoot":""}